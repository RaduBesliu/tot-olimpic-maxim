// Time Complexity: O(V + E)
// Solution: We can solve this problem using Khan's Algorithm ( BFS variant ). Keep an array of indegrees of every single vertex, then add
// to the queue the ones that have no incoming edges. Perform normal BFS search.
// Condition to add to the queue: indegree[vertex] - 1 == 0 ( has no more requirements )

class Solution {
public:
    vector < int > topologicalSort(int& numCourses, list < int >* adjList, vector < int > indegree) {
        queue < int > q;
        vector < int > topologicalArray;
        
        for (int i = 0; i < numCourses; ++i) {
            if (!indegree[i]) {
                q.push(i);
                topologicalArray.push_back(i);
            }
        }
        
        while(!q.empty()) {
            int firstInQueue = q.front();
            q.pop();
            
            for (auto const& adjVert: adjList[firstInQueue]) {
                if (!(--indegree[adjVert])) {
                    q.push(adjVert);
                    topologicalArray.push_back(adjVert);
                }
            }
        }
        
        if (topologicalArray.size() == numCourses) {
            return topologicalArray;
        }
        
        return {};
    }
    
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        list < int >* adjList;
        adjList = new list < int > [numCourses];
        vector < int > indegree(numCourses, 0);
        
        for (auto const& edge: prerequisites) {
            adjList[edge[1]].push_back(edge[0]);
            ++indegree[edge[0]];
        }
        
        return topologicalSort(numCourses, adjList, indegree);
    }
};